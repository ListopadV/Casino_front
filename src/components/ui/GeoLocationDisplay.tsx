'use client';

import { useGeoLocation } from '@/shared/hooks/useGeoLocation';
import React from 'react';

interface GeoLocationDisplayProps {
  className?: string;
  showFlag?: boolean;
  showCountry?: boolean;
  showLanguage?: boolean;
}

const GeoLocationDisplay: React.FC<GeoLocationDisplayProps> = ({ 
  className = '', 
  showFlag = true, 
  showCountry = true, 
  showLanguage = true 
}) => {
  const { location, loading, error } = useGeoLocation();

  if (loading) {
    return (
      <div className={`flex items-center space-x-2 text-sm text-gray-400 ${className}`}>
        <div className="w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full animate-spin"></div>
        <span>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...</span>
      </div>
    );
  }

  if (error || !location) {
    return (
      <div className={`flex items-center space-x-2 text-sm text-gray-400 ${className}`}>
        <span>üåç</span>
        <span>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</span>
      </div>
    );
  }

  const getCountryFlag = (country: string) => {
    const flagMap: Record<string, string> = {
      'US': 'üá∫üá∏', 'GB': 'üá¨üáß', 'CA': 'üá®üá¶', 'AU': 'üá¶üá∫', 'NZ': 'üá≥üáø',
      'FR': 'üá´üá∑', 'BE': 'üáßüá™', 'CH': 'üá®üá≠', 'LU': 'üá±üá∫', 'MC': 'üá≤üá®',
      'DE': 'üá©üá™', 'AT': 'üá¶üáπ', 'LI': 'üá±üáÆ',
      'IT': 'üáÆüáπ', 'SM': 'üá∏üá≤', 'VA': 'üáªüá¶',
      'RU': 'üá∑üá∫', 'BY': 'üáßüáæ', 'KZ': 'üá∞üáø', 'KG': 'üá∞üá¨', 'TJ': 'üáπüáØ', 'TM': 'üáπüá≤', 'UZ': 'üá∫üáø',
      'UA': 'üá∫üá¶',
      'PL': 'üáµüá±',
      'ES': 'üá™üá∏', 'PT': 'üáµüáπ', 'NL': 'üá≥üá±', 'SE': 'üá∏üá™', 'NO': 'üá≥üá¥', 'DK': 'üá©üá∞', 'FI': 'üá´üáÆ',
      'CZ': 'üá®üáø', 'SK': 'üá∏üá∞', 'HU': 'üá≠üá∫', 'RO': 'üá∑üá¥', 'BG': 'üáßüá¨', 'HR': 'üá≠üá∑', 'SI': 'üá∏üáÆ',
      'LT': 'üá±üáπ', 'LV': 'üá±üáª', 'EE': 'üá™üá™', 'GR': 'üá¨üá∑', 'CY': 'üá®üáæ', 'TR': 'üáπüá∑',
      'JP': 'üáØüáµ', 'KR': 'üá∞üá∑', 'CN': 'üá®üá≥', 'TW': 'üáπüáº', 'HK': 'üá≠üá∞', 'SG': 'üá∏üá¨',
      'MY': 'üá≤üáæ', 'TH': 'üáπüá≠', 'VN': 'üáªüá≥', 'ID': 'üáÆüá©', 'PH': 'üáµüá≠', 'IN': 'üáÆüá≥',
      'PK': 'üáµüá∞', 'BD': 'üáßüá©', 'LK': 'üá±üá∞', 'NP': 'üá≥üáµ', 'MM': 'üá≤üá≤', 'KH': 'üá∞üá≠',
      'LA': 'üá±üá¶', 'BR': 'üáßüá∑', 'AR': 'üá¶üá∑', 'CL': 'üá®üá±', 'CO': 'üá®üá¥', 'PE': 'üáµüá™',
      'VE': 'üáªüá™', 'EC': 'üá™üá®', 'BO': 'üáßüá¥', 'PY': 'üáµüáæ', 'UY': 'üá∫üáæ', 'MX': 'üá≤üáΩ',
      'GT': 'üá¨üáπ', 'BZ': 'üáßüáø', 'SV': 'üá∏üáª', 'HN': 'üá≠üá≥', 'NI': 'üá≥üáÆ', 'CR': 'üá®üá∑',
      'PA': 'üáµüá¶', 'CU': 'üá®üá∫', 'DO': 'üá©üá¥', 'HT': 'üá≠üáπ', 'JM': 'üáØüá≤', 'TT': 'üáπüáπ',
      'BB': 'üáßüáß', 'AG': 'üá¶üá¨', 'BS': 'üáßüá∏', 'ZA': 'üáøüá¶', 'NG': 'üá≥üá¨', 'KE': 'üá∞üá™',
      'TZ': 'üáπüáø', 'UG': 'üá∫üá¨', 'GH': 'üá¨üá≠', 'ET': 'üá™üáπ', 'EG': 'üá™üá¨', 'MA': 'üá≤üá¶',
      'TN': 'üáπüá≥', 'DZ': 'üá©üáø', 'LY': 'üá±üáæ', 'SD': 'üá∏üá©', 'SA': 'üá∏üá¶', 'AE': 'üá¶üá™',
      'QA': 'üá∂üá¶', 'BH': 'üáßüá≠', 'KW': 'üá∞üáº', 'OM': 'üá¥üá≤', 'YE': 'üáæüá™', 'IQ': 'üáÆüá∂',
      'JO': 'üáØüá¥', 'LB': 'üá±üáß', 'SY': 'üá∏üáæ', 'IL': 'üáÆüá±', 'PS': 'üáµüá∏', 'IR': 'üáÆüá∑', 'AF': 'üá¶üá´'
    };
    return flagMap[country] || 'üåç';
  };

  const getLanguageName = (lang: string) => {
    const langMap: Record<string, string> = {
      'en': 'English',
      'fr': 'Fran√ßais', 
      'de': 'Deutsch',
      'it': 'Italiano',
      'ru': '–†—É—Å—Å–∫–∏–π',
      'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
      'pl': 'Polski'
    };
    return langMap[lang] || lang.toUpperCase();
  };

  return (
    <div className={`flex items-center space-x-2 text-sm text-gray-300 ${className}`}>
      {showFlag && (
        <span className="text-lg">
          {getCountryFlag(location.country)}
        </span>
      )}
      
      {showCountry && (
        <span className="font-medium">
          {location.country === 'Unknown' ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' : location.country}
        </span>
      )}
      
      {showLanguage && (
        <span className="text-gray-400">
          ({getLanguageName(location.language)})
        </span>
      )}
      
      {location.city && location.city !== 'Unknown' && (
        <span className="text-gray-500">
          ‚Ä¢ {location.city}
        </span>
      )}
    </div>
  );
};

export default GeoLocationDisplay;
